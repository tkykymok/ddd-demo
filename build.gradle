plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id "nu.studer.jooq" version "8.2.1"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.postgresql:postgresql:42.7.1'


    implementation 'org.jooq:jooq:3.19.1'

    jooqGenerator 'org.postgresql:postgresql:42.7.1'
    jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

jooq {
    version = '3.19.1'
    configurations {
        main {
            generationTool {
                jdbc {
                    url = 'jdbc:postgresql://postgres-demo:5432/ddd_demo'
                    user = 'postgres'
                    password = '3wL$2D4s7jiNx'
                }
                generator {
                    name = "org.jooq.codegen.JavaGenerator"
                    database {
//                        name = "ddd_demo"
                        inputSchema = 'public'
                        includes = '.*'
                    }
                    target {
                        packageName = "com.example.demo.infrastructure.jooq"
                        directory = "${project.buildDir}/generated/source/jooq/main"
                    }
//                    generate {
//                        deprecated = false
//                        records = true
//                        immutablePojos = true
//                        fluentSetters = true
//                    }
                }
            }
        }
    }
}

//tasks.register('runMigrateAndGenerateJooq') {
//    doFirst {
//        // Flywayマイグレーションを実行
//        gradle.startParameter.taskNames = ['flywayMigrate']
//        gradle.run()
//    }
//    doLast {
//        // jOOQコード生成を実行
//        gradle.startParameter.taskNames = ['generateJooq']
//        gradle.run()
//    }
//}

tasks.named('test') {
    useJUnitPlatform()
}

bootRun {
    jvmArgs = [
            '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005',
    ]
}